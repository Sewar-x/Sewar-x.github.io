(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{1128:function(t,s,a){t.exports=a.p+"assets/img/git仓库.06eceed2.png"},1129:function(t,s,a){t.exports=a.p+"assets/img/git.9605ca3a.jpg"},1130:function(t,s,a){t.exports=a.p+"assets/img/git-reset.e7e5d039.png"},1131:function(t,s,a){t.exports=a.p+"assets/img/git-revert.3f1a374a.png"},1692:function(t,s,a){"use strict";a.r(s);var e=a(1),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"git-基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-基础"}},[t._v("#")]),t._v(" Git 基础")]),t._v(" "),s("h3",{attrs:{id:"git-原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-原理"}},[t._v("#")]),t._v(" GIt 原理")]),t._v(" "),s("p",[s("img",{attrs:{src:a(1128),alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("git 仓库分为两部分：")]),t._v(" "),s("ul",[s("li",[t._v("本地仓库")]),t._v(" "),s("li",[t._v("远程仓库")])]),t._v(" "),s("p",[t._v("git 本地仓库会分成三个区：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("工作区")]),t._v("（Workspace）：我们书写代码的地方，工作的目录就叫工作区。")]),t._v(" "),s("li",[s("strong",[t._v("暂存区")]),t._v(" （Index）：暂时存储的区域，在git中，代码无法直接从工作区提交到仓库区，而是需要先从工作区添加到暂存区，然后才能从暂存区提交到仓库区。\n"),s("ul",[s("li",[t._v("暂存区的目的是避免误操作。")])])]),t._v(" "),s("li",[s("strong",[t._v("本地仓库区")]),t._v("（Repository）：将保存在暂存区域的内容永久转储到 Git 仓库中，生成版本号。生成版本号之后，就可以任何的回退到某一个具体的版本。\n"),s("ul",[s("li",[t._v("当我们进行commit操作的时候，事实上只是提交到本地的git分支上；而只有进行了push后，才是提交到远程的git分支上")])])]),t._v(" "),s("li",[s("strong",[t._v("远程仓库")]),t._v("（Remote）： 仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换。")])]),t._v(" "),s("h2",{attrs:{id:"git-常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-常用命令"}},[t._v("#")]),t._v(" Git 常用命令")]),t._v(" "),s("p",[s("img",{attrs:{src:a(1129),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"git-常见操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-常见操作"}},[t._v("#")]),t._v(" Git 常见操作")]),t._v(" "),s("h3",{attrs:{id:"快速创建新分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速创建新分支"}},[t._v("#")]),t._v(" 快速创建新分支")]),t._v(" "),s("ul",[s("li",[t._v("切换到 master 分支(或则作为基分支的节点)： "),s("code",[t._v("git chekcout master")])]),t._v(" "),s("li",[t._v("更新本地仓库代码:  "),s("code",[t._v("git pull")]),t._v(" （"),s("code",[t._v("git pull = git fetch + git merge refs/remotes/origin/maste")]),t._v("）")]),t._v(" "),s("li",[t._v("创建新分支并切换到新分支："),s("code",[t._v("git checkout -b 分支名称")])])]),t._v(" "),s("h3",{attrs:{id:"解决冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突"}},[t._v("#")]),t._v(" 解决冲突")]),t._v(" "),s("p",[s("strong",[t._v("场景示例")])]),t._v(" "),s("p",[t._v("以 "),s("code",[t._v("index.html")]),t._v(" 文件为例，如果你跟同事都修改了这个文件，就有如下两种场景:")]),t._v(" "),s("p",[t._v("场景1：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("你在本地修改了 index.html，但还没执行 git commit（未提交到本地仓库），此时如果你执行 git pull，代码无法更新，会有如下提示：")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("error: Your "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("local")]),t._v(" changes to "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'index.html'")]),t._v(" would be overwritten by merge.  Aborting.\nPlease, commit your changes or stash them before you can merge.\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("解决方案：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("方案1：(不推荐)")]),t._v(" "),s("ul",[s("li",[t._v("先备份本地 index.html，然后执行 git revert 撤销文件提交，然后执行 git pull 下载远程代码并合并本地代码，此时代码就可以正常拉取。（此时远程仓库代码和本地代码没有冲突）")]),t._v(" "),s("li",[t._v("然后再通过 diff 比较更新后的代码和本地备份代码 两份代码不一致的地方，修改后再次 git commit 提交代码即可")])])]),t._v(" "),s("li",[s("p",[t._v("方案2：(推荐)")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("第一步：提交修改到本地仓库")]),t._v(" "),s("ul",[s("li",[t._v("git add . （添加到暂存区）")]),t._v(" "),s("li",[t._v('git commit -m"提交备注"  提交修改到本地仓库')])])]),t._v(" "),s("li",[s("p",[t._v("第二步： git pull （获取并合并远程分支代码)")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("获取并合并远程分支代码后，会出现代码冲突提示：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Auto-merging 冲突文件名\nCONFLICT (content): Merge conflict 冲突文件名\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])])])]),t._v(" "),s("li",[s("p",[t._v("第三步： 打开代码冲突解决工具，查看冲突部分代码，与同事协商保留的代码。")])]),t._v(" "),s("li",[s("p",[t._v('第四步： 解决冲突后的代码后，重新执行 git add .  ->  git commit -m"提交备注"')])])])]),t._v(" "),s("li",[s("p",[t._v("方案3：（推荐）")]),t._v(" "),s("ul",[s("li",[t._v("第一步："),s("a",{attrs:{href:"https://git-scm.com/docs/git-stash",target:"_blank",rel:"noopener noreferrer"}},[t._v("git stash"),s("OutboundLink")],1),t._v(" 暂存本地修改 （暂存后本地工作区回到干净的工作目录）\n"),s("ul",[s("li",[t._v("查看暂存信息 git stash list")])])]),t._v(" "),s("li",[t._v("第二步：git pull （获取并合并远程分支代码)\n"),s("ul",[s("li",[t._v("获取并合并远程分支代码后，会出现代码冲突提示")])])]),t._v(" "),s("li",[t._v("第三步：git  stash pop 还原暂存的内容")]),t._v(" "),s("li",[t._v("第四步：解决文件中冲突的的部分，保存代码后提交")])])])])])]),t._v(" "),s("p",[t._v("场景2：")]),t._v(" "),s("ul",[s("li",[t._v("你本地修改了 index.html，而且执行了git commit（提交到本地仓库），此时如果执行 git push 的话就会提示冲突，因为你的同事的版本已经先于你提交了，你们对同一个文件进行了操作，此时 git 就不知道究竟采用你的还是你的同事的代码。")])]),t._v(" "),s("p",[s("strong",[t._v("参考资料")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/learn/modules/resolve-merge-conflicts-github/?WT.mc_id=DT-MVP-5003916",target:"_blank",rel:"noopener noreferrer"}},[t._v("在 GitHub 上使用合并冲突解决来解决竞争提交"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"删除分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),s("p",[t._v("假设删除本地和远程 test 分支")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("删除本地 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" 分支：git branch "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n删除本地的仓库 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" 分支：git branch "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" origin/test\n删除 origin 主机的 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" 分支：git push origin :test 命令等同于 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--delete")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"git-回滚"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-回滚"}},[t._v("#")]),t._v(" Git 回滚")]),t._v(" "),s("p",[s("code",[t._v("git reset")]),t._v(" 和 "),s("code",[t._v("git revert")])]),t._v(" "),s("p",[t._v("当前版本回滚没有任何流程化管理模式，使用最原始的分支管理和 git 命令直接回滚")]),t._v(" "),s("p",[t._v("当前回滚版本流程：")]),t._v(" "),s("p",[t._v("以 SRDPM 为例，目前生产服对应 prod 分支代码，测试服对应 test 分支代码，（master 为保护分支，定期将 prod 代码合并到 master）假如生产服某个版本出现重大问题，需要回滚，通过以下 Git 操作流程回滚：")]),t._v(" "),s("ol",[s("li",[t._v("使用 "),s("code",[t._v("git checkout prod")]),t._v(" 切换到 prod 分支，使用 "),s("code",[t._v("git log")]),t._v(" 查看提交记录；")]),t._v(" "),s("li",[t._v("查找到需要回滚的提交记录 hash 值，复制提交记录 hash 值；")]),t._v(" "),s("li",[t._v("使用命令 "),s("code",[t._v("git reset --hard <commit-hash>")]),t._v(" 强制回滚，也可以使用 "),s("code",[t._v("git revert <commit-hash>")]),t._v(" 去除提交记录（两个命令区别下面将详细介绍）；")]),t._v(" "),s("li",[t._v("强制推送到远程分支："),s("code",[t._v("git push --force origin <branch-name>")]),t._v(";")]),t._v(" "),s("li",[t._v("执行命令 "),s("code",[t._v("npm run build")]),t._v(" 重新构建并上传当前分支代码；")])]),t._v(" "),s("h3",{attrs:{id:"git-reset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("原理：")]),t._v(" git reset的作用是修改HEAD的位置，即将HEAD指向的位置改变为之前存在的某个版本，如下图所示，假设我们要回退到版本")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(1130),alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("要回滚并同步远程分支，可以按照以下步骤进行操作：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("确定回滚目标：首先，确定要回滚到的目标提交。可以使用 "),s("code",[t._v("git log")]),t._v(" 命令查看提交历史，找到目标提交的哈希值。")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("回滚本地分支：运行以下命令回滚本地分支到目标提交。")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--hard")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit-hash"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n将 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit-hash"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" 替换为目标提交的哈希值。\n\n例如：git reset "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--hard")]),t._v(" abcdef12345 \n这将回滚本地分支，并将其指向目标提交。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("强制推送到远程分支：由于本地分支已经回滚，远程分支仍然指向旧的提交。要将更改同步到远程分支，可以使用 "),s("code",[t._v("--force")]),t._v(" 参数进行强制推送。")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--force")]),t._v(" origin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n将 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" 替换为你的分支名称。\n\n例如："),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--force")]),t._v(" origin my-branch"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--force")]),t._v(" origin my-branch 这将强制推送本地分支的更改到远程分支，并覆盖远程分支的历史记录。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])])]),t._v(" "),s("p",[t._v("请注意，强制推送会改变远程分支的历史记录，可能会影响其他人的工作。在执行强制推送之前，请确保与团队成员进行适当的沟通，并确保你有合理的理由进行这样的操作。")]),t._v(" "),s("h3",{attrs:{id:"git-revert"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-revert"}},[t._v("#")]),t._v(" git revert")]),t._v(" "),s("blockquote",[s("p",[t._v("原理： git revert是用于“反做”某一个版本，以达到撤销该版本的修改的目的。")]),t._v(" "),s("p",[t._v("比如，我们commit了三个版本（版本一、版本二、 版本三），突然发现版本二不行（如：有bug），想要撤销版本二，但又不想影响撤销版本三的提交，就可以用 git revert 命令来反做版本二，生成新的版本四，这个版本四里会保留版本三的东西，但撤销了版本二的东西。")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(1131),alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("git revert")]),t._v(" 命令可以回滚指定的提交，而不是像 "),s("code",[t._v("git reset")]),t._v(" 那样移动分支指针。"),s("code",[t._v("git revert")]),t._v(" 会创建一个新的提交，该提交撤销了要回滚的提交的更改。以下是使用 "),s("code",[t._v("git revert")]),t._v(" 回滚版本的步骤：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("确定要回滚的提交：首先，使用 "),s("code",[t._v("git log")]),t._v(" 命令查看提交历史，找到要回滚的提交的哈希值。")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("执行回滚：运行以下命令来回滚指定的提交。")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit-hash"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n将 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit-hash"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" 替换为要回滚的提交的哈希值。\n\n例如：\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert abcdef12345\n这将创建一个新的提交，该提交撤销了目标提交的更改。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("提交回滚：在弹出的编辑器中，输入撤销提交的说明，保存并关闭编辑器。")])]),t._v(" "),s("li",[s("p",[t._v("推送到远程：如果你想将回滚的提交推送到远程仓库，可以运行 "),s("code",[t._v("git push")]),t._v(" 命令。")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n将 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" 替换为你的分支名称。\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin main\n这将把回滚的提交推送到远程分支。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])])]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("git revert")]),t._v(" 回滚版本是一种安全的方法，因为它不会改变历史记录。相比之下，"),s("code",[t._v("git reset")]),t._v(" 会移动分支指针并修改历史记录，可能会影响其他人的工作。因此，在团队协作的情况下，"),s("code",[t._v("git revert")]),t._v(" 通常是更推荐的方法。")]),t._v(" "),s("h2",{attrs:{id:"git-项目配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-项目配置"}},[t._v("#")]),t._v(" Git 项目配置")]),t._v(" "),s("h3",{attrs:{id:"git-hook"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-hook"}},[t._v("#")]),t._v(" Git Hook")]),t._v(" "),s("p",[s("strong",[t._v("参考资料")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://panjiachen.github.io/vue-element-admin-site/zh/guide/advanced/git-hook.html#lint-staged",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-element-admin Git Hooks"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.npmjs.com/package/husky",target:"_blank",rel:"noopener noreferrer"}},[t._v("husky"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://git-scm.com/about",target:"_blank",rel:"noopener noreferrer"}},[t._v("git 手册"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/131332462",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 分支设计规范"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);