(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{1338:function(t,s,a){t.exports=a.p+"assets/img/前端手动部署.86d57271.png"},1339:function(t,s,a){t.exports=a.p+"assets/img/前端部署2.2d3ff624.png"},1340:function(t,s,a){t.exports=a.p+"assets/img/304缓存.7602c6c1.png"},1341:function(t,s,a){t.exports=a.p+"assets/img/强制缓存.c0dbef74.png"},1342:function(t,s,a){t.exports=a.p+"assets/img/缓存问题.76cb0f8c.png"},1343:function(t,s,a){t.exports=a.p+"assets/img/发版问题.a6c3af9f.png"},1344:function(t,s,a){t.exports=a.p+"assets/img/数据摘要算法.bfc30e3b.png"},1345:function(t,s,a){t.exports=a.p+"assets/img/文件缓存控制.10a6208a.png"},1346:function(t,s,a){t.exports=a.p+"assets/img/动静分离部署.2c2ed823.png"},1347:function(t,s,a){t.exports=a.p+"assets/img/动静分离部署2.d91d2209.png"},1348:function(t,s,a){t.exports=a.p+"assets/img/非覆盖式发布1.ef11bb3a.png"},1349:function(t,s,a){t.exports=a.p+"assets/img/灰度部署.88ebf1cb.png"},1715:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"前端部署原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端部署原理"}},[t._v("#")]),t._v(" 前端部署原理")]),t._v(" "),s("h2",{attrs:{id:"前端手动部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端手动部署"}},[t._v("#")]),t._v(" "),s("strong",[t._v("前端手动部署")])]),t._v(" "),s("h3",{attrs:{id:"前端手动发版流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端手动发版流程"}},[t._v("#")]),t._v(" "),s("strong",[t._v("前端手动发版流程")])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("本地开发与打包")]),t._v("：\n"),s("ul",[s("li",[t._v("前端开发人员在本地开发环境中编写和测试代码。")]),t._v(" "),s("li",[t._v("当代码开发完成后，使用如"),s("code",[t._v("npm run build")]),t._v("或"),s("code",[t._v("yarn build")]),t._v("等命令，通过前端项目的构建脚本（通常是Webpack、Rollup等）打包前端代码。")]),t._v(" "),s("li",[t._v("打包过程会生成优化后的静态资源文件，通常包括HTML、CSS、JavaScript等，这些文件被放置在项目的"),s("code",[t._v("dist")]),t._v("或"),s("code",[t._v("build")]),t._v("目录下。")])])]),t._v(" "),s("li",[s("strong",[t._v("配置Nginx：")]),t._v(" "),s("ul",[s("li",[t._v("前端开发人员或系统管理员需要配置Nginx作为静态资源服务器。")]),t._v(" "),s("li",[t._v("在Nginx的配置文件（通常是"),s("code",[t._v("nginx.conf")]),t._v("或某个站点特定的配置文件）中，指定静态资源文件的根目录为前端项目的"),s("code",[t._v("dist")]),t._v("或"),s("code",[t._v("build")]),t._v("目录。")]),t._v(" "),s("li",[t._v("配置Nginx监听特定的端口（如80或443），并设置相应的访问规则，如域名、SSL证书等。")])])]),t._v(" "),s("li",[s("strong",[t._v("启动Nginx服务：")]),t._v(" "),s("ul",[s("li",[t._v("根据操作系统和Nginx安装方式的不同，使用相应的命令启动Nginx服务。")]),t._v(" "),s("li",[t._v("Nginx开始监听配置的端口，并等待客户端的请求。")])])]),t._v(" "),s("li",[s("strong",[t._v("部署静态资源：")]),t._v(" "),s("ul",[s("li",[t._v("将打包生成的静态资源文件（位于"),s("code",[t._v("dist")]),t._v("或"),s("code",[t._v("build")]),t._v("目录）部署到Nginx配置的根目录下。")]),t._v(" "),s("li",[t._v("这可以通过手动复制文件或使用自动化工具（如FTP客户端、SCP、rsync等）完成。")])])]),t._v(" "),s("li",[s("strong",[t._v("访问静态资源：")]),t._v(" "),s("ul",[s("li",[t._v("当用户通过浏览器访问配置好的域名或IP地址时，Nginx会拦截请求，并根据配置提供相应的静态资源文件。")]),t._v(" "),s("li",[t._v("浏览器接收到这些文件后，会解析并渲染页面，从而展示前端应用。")])])]),t._v(" "),s("li",[s("strong",[t._v("更新与发版：")]),t._v(" "),s("ul",[s("li",[t._v("当前端代码有更新时，开发人员会重复步骤1到步骤5，以发布新的版本。")]),t._v(" "),s("li",[t._v("在更新过程中，可能需要重启Nginx服务或采用其他方式使配置生效。")])])])]),t._v(" "),s("h3",{attrs:{id:"静态资源服务搭建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态资源服务搭建"}},[t._v("#")]),t._v(" "),s("strong",[t._v("静态资源服务搭建")])]),t._v(" "),s("p",[t._v("在前后端分离项目中，前端部署服务为：")]),t._v(" "),s("ol",[s("li",[t._v("使用 "),s("code",[t._v("nginx")]),t._v(" 起一个 web 服务器；")]),t._v(" "),s("li",[t._v("将"),s("code",[t._v("dist")]),t._v("文件夹的静态资源放到指定的路径下；")]),t._v(" "),s("li",[t._v("配置下"),s("code",[t._v("nginx")]),t._v("访问路径，对于请求接口使用"),s("code",[t._v("proxy_pass")]),t._v("进行转发，解决跨域的问题。")])]),t._v(" "),s("h3",{attrs:{id:"存在问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存在问题"}},[t._v("#")]),t._v(" "),s("strong",[t._v("存在问题")])]),t._v(" "),s("p",[t._v("以上传统的前端手动发版流程存在以下几个问题：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("手动操作多，容易出错")]),t._v("：整个流程涉及多个步骤，且大部分需要手动完成，如打包、传输、部署等，这些步骤中容易出现操作失误，导致发版失败或出现问题。")]),t._v(" "),s("li",[s("strong",[t._v("依赖后端人员")]),t._v("：前端开发人员需要将生成的"),s("code",[t._v("dist")]),t._v("文件夹交给后端开发人员，再由后端人员部署，这增加了沟通成本和依赖关系，也增加了出错的概率。")]),t._v(" "),s("li",[s("strong",[t._v("缺乏自动化和持续集成/持续部署（CI/CD）")]),t._v("：没有利用自动化工具和CI/CD流程，使得发版过程繁琐且效率低下，也无法保证每次发版的质量和一致性。")]),t._v(" "),s("li",[s("strong",[t._v("缺乏版本控制和追踪")]),t._v("：在手动发版过程中，很难对每次发版的内容和变化进行追踪和管理，这不利于问题排查和版本回滚。")])]),t._v(" "),s("p",[t._v("为了解决这些问题，可以考虑引入自动化工具和CI/CD流程（如Jenkins、GitLab CI/CD等），将前端代码和后端代码分开部署，利用版本控制系统（如Git）对代码进行管理和追踪，以提高发版的效率和质量。")]),t._v(" "),s("p",[t._v("同时，也可以考虑使用Docker等容器化技术，将前端和后端代码打包成独立的容器，实现更快速、灵活的部署。")]),t._v(" "),s("h2",{attrs:{id:"前端自动化部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端自动化部署"}},[t._v("#")]),t._v(" "),s("strong",[t._v("前端自动化部署")])]),t._v(" "),s("h3",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" "),s("strong",[t._v("概念")])]),t._v(" "),s("p",[t._v("前端自动化部署是指通过工具和脚本自动完成前端项目的构建、打包和部署等工作。")]),t._v(" "),s("p",[t._v("目的是减少人工操作，提高效率，降低出错概率。")]),t._v(" "),s("p",[t._v("通过自动化部署，开发人员可以更加专注于业务逻辑的开发，而不需要关心一些繁琐而机械的操作。")]),t._v(" "),s("h3",{attrs:{id:"流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流程"}},[t._v("#")]),t._v(" "),s("strong",[t._v("流程")])]),t._v(" "),s("p",[t._v("前端自动化部署的思路和流程可以大致分为以下几个步骤：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("代码提交与版本控制")]),t._v("：前端开发人员编写并测试代码后，将代码提交到版本控制系统（如Git）中。这一步确保了代码的版本管理和追踪。")]),t._v(" "),s("li",[s("strong",[t._v("持续集成（CI）")]),t._v("：当代码提交到版本控制系统后，持续集成工具（如Jenkins、GitLab CI/CD等）会自动触发构建流程。构建过程通常包括代码拉取、依赖安装、代码检查（如linting）、单元测试等步骤。这一步确保了每次构建都是基于最新的代码，并且代码质量符合预设标准。")]),t._v(" "),s("li",[s("strong",[t._v("构建与打包")]),t._v("：构建流程完成后，自动化部署工具会根据项目的配置和需求，对前端项目进行打包。这通常包括压缩JS、CSS文件，生成静态资源文件等。打包后的文件通常会被放置在特定的目录中，准备进行下一步的部署。")]),t._v(" "),s("li",[s("strong",[t._v("持续部署（CD）")]),t._v("：在打包完成后，持续部署工具会自动将打包后的文件部署到目标环境（如测试环境、生产环境等）。部署过程可能包括文件传输（如FTP、SCP等）、环境配置、服务重启等步骤。这一步确保了代码能够自动、快速地部署到目标环境，提高了部署效率。")]),t._v(" "),s("li",[s("strong",[t._v("监控与回滚")]),t._v("：在部署完成后，自动化部署工具会监控应用的运行状态，确保应用能够正常运行。如果出现问题，可以根据预设的策略进行回滚，将应用恢复到之前的状态，保证了应用的稳定性和可靠性。")])]),t._v(" "),s("p",[t._v("整个前端自动化部署流程中，工具的选择和配置是关键。")]),t._v(" "),s("p",[t._v("需要根据项目的需求、团队的技术栈和偏好来选择合适的工具和配置。")]),t._v(" "),s("p",[t._v("同时，也需要不断地优化和完善流程，以提高部署效率和质量。")]),t._v(" "),s("h3",{attrs:{id:"方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方案"}},[t._v("#")]),t._v(" "),s("strong",[t._v("方案")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("工具/方案")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("思路")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("优点")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("缺点")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("Jenkins")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Jenkins是一个开源的持续集成/持续部署（CI/CD）工具，可以自动化构建、测试和部署项目。"),s("br"),t._v("通过配置Jenkins，可以实现在代码提交后自动打包、构建和部署前端项目。")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("高度可配置，支持多种构建工具和插件。"),s("br"),t._v("支持自动化构建、测试和部署流程。"),s("br"),t._v("有丰富的社区支持和文档资源。")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("配置相对复杂，需要一定的学习成本。"),s("br"),t._v(" 可能需要额外的插件或工具来实现某些功能。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("GitLab CI/CD")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("GitLab内置了CI/CD功能，可以直接在Git仓库中配置CI/CD流程。"),s("br"),t._v("通过编写"),s("code",[t._v(".gitlab-ci.yml")]),t._v("文件，可以定义自动化构建、测试和部署任务。")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("与GitLab紧密集成，方便管理和配置。"),s("br"),t._v(" 支持Docker等容器化技术，方便实现环境隔离和部署。"),s("br"),t._v("提供了丰富的预定义模板和工具，简化配置过程。")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("需要在GitLab中配置和管理CI/CD流程。"),s("br"),t._v("可能受到GitLab平台本身的限制或影响。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("GitHooks")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("通过使用 Git Hooks 和 node script、shell 在 git 操作时,执行 node 和 shell 脚本，实现自动化构建和部署")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("使用 node 编写自动化构建和部署脚本灵活性高")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("与项目 Git Hooks 紧密集成，与项目耦合，不同项目之前需要重新编写 hooks 和 node、shell 脚本")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("Docker")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Docker是一个容器化技术，可以将前端项目打包成独立的容器，并通过Docker Compose或Kubernetes等工具进行管理和部署。")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("容器化技术可以实现环境隔离和一致性，减少部署错误和兼容性问题。"),s("br"),t._v("可以快速部署和扩展项目，提高部署效率。- 支持多平台部署，如Linux、Windows等。")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("需要学习和理解Docker和容器化技术的相关知识。"),s("br"),t._v(" 可能需要额外的配置和管理工作。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("Netlify")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Netlify是一个基于云的前端自动化部署平台，支持多种前端框架和工具。"),s("br"),t._v("通过连接Git仓库，可以自动构建、测试和部署前端项目。")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("提供了简单易用的界面和配置方式，降低了学习成本。"),s("br"),t._v(" 支持多种前端框架和工具，兼容性好。"),s("br"),t._v("提供了实时预览和部署日志等功能，方便跟踪和调试。")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("可能需要付费使用高级功能或增加额外的配置。"),s("br"),t._v("可能受到Netlify平台本身的限制或影响。")])])])]),t._v(" "),s("p",[t._v("关于前端自动化部署详细实践方案，可以参考博客："),s("a",{attrs:{href:"https://sewar-x.github.io/projectDeploy/%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%92%8C%E9%83%A8%E7%BD%B2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端自动部署 | Sewen 博客 (sewar-x.github.io)"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"前端部署发展过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端部署发展过程"}},[t._v("#")]),t._v(" "),s("strong",[t._v("前端部署发展过程")])]),t._v(" "),s("h3",{attrs:{id:"原始部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原始部署"}},[t._v("#")]),t._v(" "),s("strong",[t._v("原始部署")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(1338),alt:"image-20240219105349002"}})]),t._v(" "),s("p",[t._v("原始的前端开发过程：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("搭建一个静态资源服务器；")])]),t._v(" "),s("li",[s("p",[t._v("将 "),s("code",[t._v("index.html")]),t._v(" 页面和它的样式文件 "),s("code",[t._v("a.css")]),t._v("，用文本编辑器写代码，无需编译，本地预览，确认OK，使用 FPT 上传到服务器，等待用户访问。")])]),t._v(" "),s("li",[s("p",[t._v("访问页面，查看一下网络请求，200状态，访问成功。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(1339),alt:"image-20240219105947890"}})])])]),t._v(" "),s("p",[t._v("以上模式存在问题："),s("code",[t._v("a.css")]),t._v(" 通常是变化不大静态资源文件，，如果每次用户访问页面都要加载该文件，很影响性能和浪费带宽。")]),t._v(" "),s("p",[t._v("当第二次访问该文件时候，浏览器会使用 304协商缓存 保存 "),s("code",[t._v("a.css")]),t._v(" 静态资源文件：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(1340),alt:"image-20240219110403273"}})]),t._v(" "),s("p",[t._v("但协商缓存还是要和服务器通信一次，依然浪费带宽。")]),t._v(" "),s("h3",{attrs:{id:"使用强制缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用强制缓存"}},[t._v("#")]),t._v(" "),s("strong",[t._v("使用强制缓存")])]),t._v(" "),s("p",[t._v("为了减少通信带宽，通常我们会强制浏览器使用本地缓存（"),s("code",[t._v("cache-control/expires")]),t._v("），不要和服务器通信（通过配置响应 "),s("code",[t._v("cache-control/expires")]),t._v(" 字段控制强制缓存），通过使用强制缓存，浏览器请求如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(1341),alt:"image-20240219110625381"}})]),t._v(" "),s("p",[t._v("通过以上强制缓存解决了静态资源频繁请求浪费带宽的问题，但是又引出以下问题：存在缓存的静态资源如何更新？")]),t._v(" "),s("p",[t._v("为了解决缓存静态资源更新问题，后来产生以下解决方案：")]),t._v(" "),s("h3",{attrs:{id:"静态资源添加版本号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态资源添加版本号"}},[t._v("#")]),t._v(" "),s("strong",[t._v("静态资源添加版本号")])]),t._v(" "),s("p",[s("strong",[t._v("通过更新页面中引用的资源路径，让浏览器主动放弃缓存，加载新资源")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(1342),alt:"image-20240219111121296"}})]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("index.html")]),t._v(" 中引入静态资源的标签中，添加 "),s("code",[t._v("?.v=1.0.0")]),t._v(" 静态资源的版本号；")]),t._v(" "),s("p",[t._v("通过该方法，每次发布版本时， "),s("code",[t._v("index.html")]),t._v(" 页面中静态资源版本号都会改变：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(1343),alt:"image-20240219111544403"}})]),t._v(" "),s("p",[t._v("后来实践中发现以上模式存在问题：页面引用了3个css，而某次上线只改了其中的 "),s("code",[t._v("a.css")]),t._v("，如果所有链接都更新版本，就会导致 "),s("code",[t._v("b.css")]),t._v("，"),s("code",[t._v("c.css")]),t._v(" 的缓存也失效，那岂不是又有带宽浪费了？！")]),t._v(" "),s("h3",{attrs:{id:"文件级别的精确缓存控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件级别的精确缓存控制"}},[t._v("#")]),t._v(" "),s("strong",[t._v("文件级别的精确缓存控制")])]),t._v(" "),s("p",[t._v("为了让未更新的静态资源不更新，避免带宽的浪费，必须让url的修改与文件内容关联，也就是说，"),s("strong",[t._v("只有文件内容变化，才会导致相应 url 的变更")]),t._v("，从而实现文件级别的精确缓存控制。")]),t._v(" "),s("p",[t._v("解决方案：利用 "),s("a",{attrs:{href:"http://baike.baidu.com/view/10961371.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据摘要算法"),s("OutboundLink")],1),t._v(" 对文件求摘要信息，摘要信息与文件内容一一对应，就有了一种可以精确到单个文件粒度的缓存控制依据了。（数据摘要算法通过输入相同的明文数据经过相同的消息摘要算法得到相同的"),s("a",{attrs:{href:"https://baike.baidu.com/item/%E5%AF%86%E6%96%87/9684333?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"}},[t._v("密文"),s("OutboundLink")],1),t._v("）")]),t._v(" "),s("p",[s("img",{attrs:{src:a(1344),alt:"image-20240219112425432"}})]),t._v(" "),s("p",[t._v("通过利用 "),s("a",{attrs:{href:"http://baike.baidu.com/view/10961371.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据摘要算法"),s("OutboundLink")],1),t._v(" 对文件求摘要信息作为文件版本号，只有当文件内容发生变更时，文件本版号才会更新，因此内容不变的静态资源文件版本号不更改。从而实现对文件更新的精准控制。")]),t._v(" "),s("blockquote",[s("p",[t._v("在现代前端工程项目中，如何使用精确文件级别的缓存控制？")])]),t._v(" "),s("p",[t._v("在使用 webpack 构建的现代前端工程项目中，依然是使用 文件内容的数据摘要算法，对文件内存加密获取 hash 值作为文件的版本号，实现文件级别的精确缓存控制。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(1345),alt:"image-20240220155603071"}})]),t._v(" "),s("p",[t._v("以上为使用 webpack 构建的现代前端工程项目，上图中，通过使用"),s("code",[t._v("文件名 + hash")]),t._v(" 的方式生成文件名，实现文件级别的缓存控制，当文件内容发生变化时，生成的文件名称 hash 值也随之变化。")]),t._v(" "),s("p",[s("strong",[t._v("webpack 输出文件名称配置")])]),t._v(" "),s("p",[t._v("在 webpack 配置中，通过使用 "),s("code",[t._v("output.filename")]),t._v(" 配置输出文件的名称。")]),t._v(" "),s("p",[t._v("在有多个 Chunk 要输出时 Webpack 会为每个 Chunk取一个名称，可以根据 Chunk 的名称来区分输出的文件名：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("filename")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[name].js'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("代码里的 "),s("code",[t._v("[name]")]),t._v(" 代表用内置的 "),s("code",[t._v("name")]),t._v(" 变量去替换"),s("code",[t._v("[name]")]),t._v("，这时可以把它看作一个字符串模块函数， 每个要输出的 Chunk 都会通过这个函数去拼接出输出的文件名称。")]),t._v(" "),s("p",[t._v("内置变量除了 "),s("code",[t._v("name")]),t._v(" 还包括：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("变量名")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("id")]),t._v(" "),s("td",[t._v("Chunk 的唯一标识，从0开始")])]),t._v(" "),s("tr",[s("td",[t._v("name")]),t._v(" "),s("td",[t._v("Chunk 的名称")])]),t._v(" "),s("tr",[s("td",[t._v("hash")]),t._v(" "),s("td",[t._v("Chunk 的唯一标识的 Hash 值")])]),t._v(" "),s("tr",[s("td",[t._v("chunkhash")]),t._v(" "),s("td",[t._v("Chunk 内容的 Hash 值")])])])]),t._v(" "),s("p",[t._v("其中 "),s("code",[t._v("hash")]),t._v(" 和 "),s("code",[t._v("chunkhash")]),t._v(" 的长度是可指定的，"),s("code",[t._v("[hash:8]")]),t._v(" 代表取8位 Hash 值，默认是20位。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意 "),s("a",{attrs:{href:"https://github.com/webpack-contrib/extract-text-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("ExtractTextWebpackPlugin"),s("OutboundLink")],1),t._v(" 插件是使用 "),s("code",[t._v("contenthash")]),t._v(" 来代表哈希值而不是 "),s("code",[t._v("chunkhash")]),t._v("， 原因在于 "),s("code",[t._v("ExtractTextWebpackPlugin")]),t._v(" 提取出来的内容是代码内容本身而不是由一组模块组成的 Chunk。")])]),t._v(" "),s("p",[t._v("当你希望输出文件名包含 chunkhash（即每个代码块的唯一哈希值）时，Webpack 会为每个生成的 chunk（代码块）生成一个唯一的哈希值，该值基于 chunk 的内容。这种机制确保了当 chunk 的内容发生变化时，其对应的哈希值也会改变。")]),t._v(" "),s("p",[s("strong",[t._v("chunkhash 的计算原理：")])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("内容哈希")]),t._v("：chunkhash 是基于 chunk 的内容计算的。这意味着，如果你更改了 chunk 中的任何代码（例如，JavaScript、CSS 或其他资源），那么 chunkhash 将会改变。这种机制确保了当文件内容发生变化时，浏览器会加载新的文件版本，而不是使用缓存中的旧版本。")]),t._v(" "),s("li",[s("strong",[t._v("不同入口文件的依赖解析")]),t._v("：Webpack 会为每个入口文件（entry point）单独构建依赖图，并为每个入口文件生成一个或多个 chunks。每个 chunk 都会有一个唯一的 chunkhash，即使它们属于同一个入口文件。这意味着，如果你有一个主入口文件（例如 "),s("code",[t._v("main.js")]),t._v("）和一些依赖文件（例如 "),s("code",[t._v("main.css")]),t._v("），并且它们都被打包在同一个 chunk 中，那么这个 chunk 将会有一个唯一的 chunkhash。")]),t._v(" "),s("li",[s("strong",[t._v("公共库的单独处理")]),t._v("：在 Webpack 的多入口配置中，公共库（如 React、Vue 等）通常会被提取到单独的 chunks 中，以确保它们只被加载一次。这些公共库 chunks 也会有自己的 chunkhash，这样当它们的内容发生变化时，只有相应的 chunk 会被重新加载。")])]),t._v(" "),s("p",[t._v("通过在 "),s("code",[t._v("output.filename")]),t._v(" 中使用 "),s("code",[t._v("[contenthash]")]),t._v(" 占位符，可以告诉 Webpack 在输出文件名中包含 chunkhash。例如：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("output")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("filename")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[name].[contenthash].js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("chunkFilename")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[name].[contenthash].js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"动静资源分离部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动静资源分离部署"}},[t._v("#")]),t._v(" "),s("strong",[t._v("动静资源分离部署")])]),t._v(" "),s("p",[t._v("现代互联网企业，为了进一步提升网站性能，提升网站访问速度，通常会把静态资源和动态网页分集群部署，静态资源会被部署到CDN节点上，网页中引用的资源也会变成对应的部署路径：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(1346),alt:"image-20240219113116232"}})]),t._v(" "),s("p",[t._v("将静态资源和动态网页分集群部署的方案主要思路:")]),t._v(" "),s("p",[t._v("将静态资源（如图片、CSS、JS文件等）和动态网页（如需要后端处理的页面）分别部署在不同的服务器上，以提高系统的性能和可扩展性。具体实现流程如下：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("环境准备")]),t._v("：首先，需要准备静态资源服务器和动态网页服务器。静态资源服务器可以使用CDN（内容分发网络）节点或专门的静态文件服务器，而动态网页服务器则可以使用Web应用服务器，如Tomcat、Nginx等。")]),t._v(" "),s("li",[s("strong",[t._v("静态资源部署")]),t._v("：将前端项目中的静态资源文件（如图片、CSS、JS文件等）部署到静态资源服务器上。这些文件通常会被打包成静态资源包，并上传至静态资源服务器的指定目录中。")]),t._v(" "),s("li",[s("strong",[t._v("动态网页部署")]),t._v("：将前端项目中的动态网页文件（如需要后端处理的页面）部署到动态网页服务器上。这些文件通常会经过构建和打包过程，生成可执行的Web应用，并部署到动态网页服务器的指定目录中。")]),t._v(" "),s("li",[s("strong",[t._v("配置服务器")]),t._v("：在静态资源服务器上配置CDN节点或静态文件服务器，确保用户能够正确地访问到静态资源。在动态网页服务器上配置Web应用服务器，确保能够正确地处理动态网页请求。")]),t._v(" "),s("li",[s("strong",[t._v("负载均衡")]),t._v("：为了提高系统的可扩展性和性能，可以配置负载均衡器（如Nginx、HAProxy等）来分发用户请求。负载均衡器可以根据请求的类型（静态资源请求或动态网页请求）将请求转发至相应的服务器上。")]),t._v(" "),s("li",[s("strong",[t._v("访问流程")]),t._v("：当用户访问前端应用时，首先会访问负载均衡器。负载均衡器会根据请求的类型将请求转发至相应的服务器上。如果用户请求的是静态资源，则会直接访问静态资源服务器上的资源；如果用户请求的是动态网页，则会访问动态网页服务器上的Web应用，由后端处理并生成相应的页面返回给用户。")])]),t._v(" "),s("p",[t._v("通过这种方式，将静态资源和动态网页分集群部署可以提高系统的性能和可扩展性。静态资源服务器可以快速地响应用户的请求，而动态网页服务器则可以处理复杂的业务逻辑和数据处理。同时，通过负载均衡器的配置，可以实现请求的分发和负载均衡，进一步提高系统的性能和稳定性。")]),t._v(" "),s("p",[t._v("通过将动静资源分离部署，发布流程将如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(1347),alt:"image-20240219114010043"}})]),t._v(" "),s("p",[t._v("以上发布版本中，同时改了页面结构和样式，也更新了静态资源对应的url地址，现在要发布代码上线，结果引出下问题：先上线页面，还是先上线静态资源？")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("先部署页面，再部署资源")]),t._v("：在二者部署的时间间隔内，如果有用户访问页面，就会在新的页面结构中加载旧的资源，并且把这个旧版本的资源当做新版本缓存起来，其结果就是：用户访问到了一个样式错乱的页面，除非手动刷新，否则在资源缓存过期之前，页面会一直执行错误。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("先部署资源，再部署页面")]),t._v("：在部署时间间隔之内，有旧版本资源本地缓存的用户访问网站，由于请求的页面是旧版本的，资源引用没有改变，浏览器将直接使用本地缓存，这种情况下页面展现正常；但没有本地缓存或者缓存过期的用户访问网站，就会出现旧版本页面加载新版本资源的情况，导致页面执行错误，但当页面完成部署，这部分用户再次访问页面又会恢复正常了。")])])]),t._v(" "),s("p",[t._v("通过以上分析发现：无论先部署哪个都会导致部署过程中发生页面错乱的问题。所以，通常在访问量不大的项目，让研发等到半夜偷偷上线，先上静态资源，再部署页面，看起来问题少一些。")]),t._v(" "),s("h3",{attrs:{id:"非覆盖式发布"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非覆盖式发布"}},[t._v("#")]),t._v(" "),s("strong",[t._v("非覆盖式发布")])]),t._v(" "),s("p",[t._v("以上问题产生的原因是采用了"),s("strong",[t._v("覆盖式发布，用 待发布资源 覆盖 已发布资源")]),t._v("。")]),t._v(" "),s("p",[t._v("为了避免在发布时“待发布资源” 覆盖 “已发布资源”导致的部署过程中发生页面错乱的问题，可以采用非覆盖式发布：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(1348),alt:"image-20240219135250351"}})]),t._v(" "),s("p",[t._v("用文件的摘要信息来对资源文件进行重命名，把摘要信息放到资源文件发布路径中，这样，内容有修改的资源就变成了一个新的文件发布到线上，不会覆盖已有的资源文件。")]),t._v(" "),s("p",[t._v("上线过程中，"),s("strong",[t._v("先全量部署静态资源，再灰度部署页面")]),t._v("，整个问题就比较完美的解决了。")]),t._v(" "),s("h4",{attrs:{id:"全量部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全量部署"}},[t._v("#")]),t._v(" "),s("strong",[t._v("全量部署")])]),t._v(" "),s("p",[t._v("全量部署静态资源是指在前端项目中，将所有的静态资源文件（如HTML、CSS、JavaScript、图片、视频等）一次性打包并部署到服务器上，供用户访问和使用。")]),t._v(" "),s("p",[t._v("这种方式下，用户在访问前端应用时，可以直接从服务器上获取到所需的静态资源，而不需要进行额外的动态生成或处理。")]),t._v(" "),s("h4",{attrs:{id:"灰度部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#灰度部署"}},[t._v("#")]),t._v(" "),s("strong",[t._v("灰度部署")])]),t._v(" "),s("p",[t._v("灰度部署（Gray Deployment）是一种逐步发布新版本的软件或应用的方式，它允许一部分用户继续使用旧版本，而另一部分用户开始使用新版本。")]),t._v(" "),s("p",[s("strong",[t._v("目的")])]),t._v(" "),s("p",[t._v("实现平滑过渡，通过逐步扩大新版本的使用范围，观察新版本的性能和用户反馈，以确保整体系统的稳定。")]),t._v(" "),s("p",[s("strong",[t._v("流程")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("在灰度部署中，通常会先选择一小部分用户或服务器作为“灰度”部分，将新版本部署到这些用户或服务器上。通常做法是把流量划分成多份，一份走新版本代码，一份走老版本代码。")])]),t._v(" "),s("li",[s("p",[t._v("然后，根据对新版本的性能、稳定性等方面的观察，逐步扩大新版本的使用范围，直到最终将所有用户或服务器都迁移到新版本上。通常做法是把走新版本代码的流程设置为 5%，没问题了再放到 10%，50%，最后放到 100% 全量。这样可以把出现问题的影响降到最低。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(1349),alt:"image-20240219162747367"}})]),t._v(" "),s("p",[s("strong",[t._v("思路")])]),t._v(" "),s("p",[t._v("使用 Nginx 实现灰度系统的思路和流程可以大致分为以下几个步骤：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("准备环境")])])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Nginx 服务器")]),t._v("：安装并配置好 Nginx 服务器，确保它能够正常处理 HTTP 请求。")]),t._v(" "),s("li",[s("strong",[t._v("新旧版本的应用")]),t._v("：确保新旧版本的应用都已经准备好，并且可以独立运行。")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("strong",[t._v("配置 Nginx")])])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("负载均衡")]),t._v("：配置 Nginx 作为反向代理，实现负载均衡。这可以通过 Nginx 的 "),s("code",[t._v("upstream")]),t._v(" 指令来实现。")]),t._v(" "),s("li",[s("strong",[t._v("请求分发")]),t._v("：根据一定的策略（如用户 ID、请求参数等）将请求分发到不同的应用版本上。这可以通过 Nginx 的 "),s("code",[t._v("location")]),t._v("、"),s("code",[t._v("if")]),t._v("、"),s("code",[t._v("set")]),t._v(" 等指令来实现。")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("strong",[t._v("灰度策略")])])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("基于用户")]),t._v("：根据用户的某些属性（如用户 ID、用户组等）来决定是否将请求路由到新版本。")]),t._v(" "),s("li",[s("strong",[t._v("基于请求参数")]),t._v("：在请求中携带特定的参数，根据这些参数的值来决定是否路由到新版本。")]),t._v(" "),s("li",[s("strong",[t._v("基于百分比")]),t._v("：随机选择一定百分比的请求路由到新版本，以测试新版本的性能和稳定性。")])]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[s("strong",[t._v("部署和观察")])])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("逐步扩大范围")]),t._v("：初始阶段，只将一小部分请求路由到新版本。观察新版本的性能、稳定性以及用户反馈。")]),t._v(" "),s("li",[s("strong",[t._v("调整策略")]),t._v("：根据观察结果，调整灰度策略，逐步扩大新版本的使用范围。")])]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[s("strong",[t._v("完全切换")])])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("完全迁移")]),t._v("：当新版本经过充分的测试并确认稳定后，可以将所有请求都路由到新版本。")])]),t._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[s("strong",[t._v("监控和日志分析")])])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("实时监控")]),t._v("：对新旧版本的应用进行实时监控，确保系统的稳定性。")]),t._v(" "),s("li",[s("strong",[t._v("日志分析")]),t._v("：分析 Nginx 和应用的日志，了解系统的运行状态和潜在问题。")])]),t._v(" "),s("p",[s("strong",[t._v("示例")])]),t._v(" "),s("p",[t._v("当使用 Nginx 进行灰度部署时，可以通过配置 Nginx 的 location 块和变量来实现基于不同条件的请求分发。以下是一个简单的 Nginx 灰度部署示例：")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义 Nginx 的工作进程数和错误日志路径  ")]),t._v("\nworker_processes auto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nerror_log /var/log/nginx/error.log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义 HTTP 服务器块  ")]),t._v("\nhttp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义后端服务器组，用于存放旧版本应用的服务器地址  ")]),t._v("\n    upstream old_app_servers "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n        server old_app_server1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n        server old_app_server2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义后端服务器组，用于存放新版本应用的服务器地址  ")]),t._v("\n    upstream new_app_servers "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n        server new_app_server1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n        server new_app_server2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义服务器块，监听 80 端口  ")]),t._v("\n    server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n        listen "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义访问日志路径  ")]),t._v("\n        access_log /var/log/nginx/access.log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义根目录，用于存放静态文件  ")]),t._v("\n        root /path/to/root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义 index 文件，默认为 index.html  ")]),t._v("\n        index index.html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义 location 块，匹配所有请求  ")]),t._v("\n        location / "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置一个变量 $gray_version，初始值为 'old'  ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$gray_version")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'old'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果请求头中包含自定义的 X-Gray-Version 头，并且值为 'new'  ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 则将 $gray_version 设置为 'new'  ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$http_x_gray_version")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'new'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n                "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$gray_version")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'new'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n  \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据 $gray_version 变量的值，将请求代理到相应的后端服务器组  ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果 $gray_version 为 'old'，则代理到旧版本应用服务器组  ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果 $gray_version 为 'new'，则代理到新版本应用服务器组  ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 eval 指令动态构建代理目标  ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("eval")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$gray_version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n            proxy_pass http://"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$gray_version_servers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n            \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if ($http_x_gray_version = 'new') {  ")]),t._v("\n        \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\tproxy_pass http://new_app_servers;  ")]),t._v("\n    \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# }  ")]),t._v("\n    \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# proxy_pass http://old_app_servers;  ")]),t._v("\n  \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置代理请求的一些参数  ")]),t._v("\n            proxy_set_header Host "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n            proxy_set_header X-Real-IP "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$remote_addr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n            proxy_set_header X-Forwarded-For "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$proxy_add_x_forwarded_for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br"),s("span",{staticClass:"line-number"},[t._v("52")]),s("br"),s("span",{staticClass:"line-number"},[t._v("53")]),s("br"),s("span",{staticClass:"line-number"},[t._v("54")]),s("br"),s("span",{staticClass:"line-number"},[t._v("55")]),s("br"),s("span",{staticClass:"line-number"},[t._v("56")]),s("br"),s("span",{staticClass:"line-number"},[t._v("57")]),s("br"),s("span",{staticClass:"line-number"},[t._v("58")]),s("br"),s("span",{staticClass:"line-number"},[t._v("59")]),s("br"),s("span",{staticClass:"line-number"},[t._v("60")]),s("br"),s("span",{staticClass:"line-number"},[t._v("61")]),s("br")])]),s("blockquote",[s("ol",[s("li",[t._v("定义了两个后端服务器组 "),s("code",[t._v("old_app_servers")]),t._v(" 和 "),s("code",[t._v("new_app_servers")]),t._v("，分别存放旧版本和新版本应用的服务器地址。")]),t._v(" "),s("li",[t._v("然后，在 "),s("code",[t._v("server")]),t._v(" 块中，我们定义了一个 "),s("code",[t._v("location /")]),t._v(" 块来匹配所有请求。")]),t._v(" "),s("li",[t._v("在 "),s("code",[t._v("location")]),t._v(" 块内部，我们使用了 "),s("code",[t._v("set")]),t._v(" 指令来定义一个变量 "),s("code",[t._v("$gray_version")]),t._v("，并初始化为 "),s("code",[t._v("'old'")]),t._v("。")]),t._v(" "),s("li",[t._v("然后，我们使用 "),s("code",[t._v("if")]),t._v(" 指令来检查请求头中是否包含自定义的 "),s("code",[t._v("X-Gray-Version")]),t._v(" 头，并且其值是否为 "),s("code",[t._v("'new'")]),t._v("。\n"),s("ul",[s("li",[t._v("如果是，则将 "),s("code",[t._v("$gray_version")]),t._v(" 设置为 "),s("code",[t._v("'new'")]),t._v("。")])])]),t._v(" "),s("li",[t._v("最后，我们使用 "),s("code",[t._v("proxy_pass")]),t._v(" 指令将请求代理到相应的后端服务器组。\n"),s("ul",[s("li",[t._v("这里使用了变量 "),s("code",[t._v("$gray_version_app_servers")]),t._v("，它应该是根据 "),s("code",[t._v("$gray_version")]),t._v(" 的值动态构建的。")]),t._v(" "),s("li",[t._v("但是，请注意，在上面的配置中，变量名 "),s("code",[t._v("$gray_version_app_servers")]),t._v(" 并没有在前面定义，正确的做法应该是使用 "),s("code",[t._v("eval")]),t._v(" 指令或者在 "),s("code",[t._v("if")]),t._v(" 语句中直接设置 "),s("code",[t._v("proxy_pass")]),t._v(" 的值。")])])])])]),t._v(" "),s("h3",{attrs:{id:"静态资源优化方案总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态资源优化方案总结"}},[t._v("#")]),t._v(" "),s("strong",[t._v("静态资源优化方案总结")])]),t._v(" "),s("ol",[s("li",[t._v("配置超长时间的本地缓存 —— 节省带宽，提高性能")]),t._v(" "),s("li",[t._v("采用内容摘要作为缓存更新依据 —— 精确的缓存控制")]),t._v(" "),s("li",[t._v("静态资源CDN部署 —— 优化网络请求")]),t._v(" "),s("li",[t._v("更资源发布路径实现非覆盖式发布 —— 平滑升级")])]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" "),s("strong",[t._v("参考资料")])]),t._v(" "),s("p",[t._v("以上内容整理自 fouber 的博客："),s("a",{attrs:{href:"https://github.com/fouber/blog/issues/6",target:"_blank",rel:"noopener noreferrer"}},[t._v("大公司里怎样开发和部署前端代码？ · Issue #6 · fouber/blog (github.com)"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);